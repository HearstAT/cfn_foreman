---
AWSTemplateFormatVersion: '2010-09-09'
Description: "The Foreman on CentOS 7"
Parameters:
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  BucketName:
    Type: String
    Default: ''
    Description: Enter name of Chef Bucket

  BucketRegion:
    Type: String
    Default: ''
    Description: Enter Region of Chef Bucket (e.g.; eu-west-1)

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  CIDRA:
    Type: String
    Default: 172.33.80.0/24
    Description: Subnet A CIDR Block

  CIDRB:
    Type: String
    Default: 172.33.90.0/24
    Description: Subnet B CIDR Block

  ForemanSubdomain:
    Type: String
    Default: foreman-a
    AllowedValues:
      - foreman-a
      - foreman-b
      - foreman-test
    Description: subdomain/prefix for chose hosted zone used for staging

  DBUser:
    Type: String
    Default: ''
    Description: Enter DB User Name

  DBPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter DB Password

  DBSnapShot:
    Type: String
    Default: ''
    Description: (Optional) Enter ARN of DB Snapshot to Create Database From

  AdminUser:
    Type: String
    Default: ''
    Description: Enter Foreman Admin User Name

  AdminEmail:
    Type: String
    Default: ''
    Description: Enter Foreman Admin Email

  AdminPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Foreman Admin Password

  HostedZone:
    Type: String
    Default: domain.com
    Description: must match a route53 hosted domain/zone

  ChefServerUrl:
    Type: String
    Default: chef.domain.com
    Description: Enter the chef server url you wish to connect foreman to

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Instance & Network Configuration
      Parameters:
        - InstanceType
        - KeyName
        - VPC
        - HostedZone
        - SSHSecurityGroup
        - CIDRA
        - CIDRB
    -
      Label:
        default: Database Configuration
      Parameters:
        - DBUser
        - DBPassword
        - DBSnapShot
    -
      Label:
        default: Foreman Configuration
      Parameters:
        - AdminUser
        - AdminPassword
        - AdminEmail
        - ForemanSubdomain
    -
      Label:
        default: Chef Configuration
      Parameters:
        - BucketName
        - BucketRegion
        - ChefServerUrl

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-d2c924b2
    eu-west-1:
      HVM64: ami-7abd0209

Resources:
  # Create the necessary subnets for Instance and DB
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: Public-Subnet-A
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Ref CIDRB
      Tags:
        - Key: Name
          Value: Public-Subnet-B
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

  # Create the necessary subnet for RDS PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Foreman DB Subnet Group"
      SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
      Tags:
        # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        - Key: Name
          Value: !Sub "${ForemanSubdomain} DB Subnet Group"

  ForemanDBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref ServerSecurityGroup
      GroupDescription: "Frontend Access"

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8443'
          ToPort: '8443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # Just a placeholder role, please don't use this for real!
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "s3:*"
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref BucketName, "/*" ] ]
          -
            Effect: "Allow"
            Action: "s3:List*"
            Resource: "arn:aws:s3:::*"
      Roles:
        - !Ref InstanceRole

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref InstanceRole

  ForemanDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
      HostedZoneName: !Sub "${HostedZone}."
      Comment: !Sub Zone apex alias targeted to ${ForemanSubdomain} Server.
          # Create DNS A Record by joining ForemanSubdomain + HostedZone
      Name: !Join [ '', [ !Ref ForemanSubdomain, ".", !Ref HostedZone, "." ] ]
      Type: A
      TTL: "900"
      ResourceRecords:
        - !GetAtt Ec2Instance.PublicIp

  ForemanDB:
    Type: AWS::RDS::DBInstance
    Properties:
      # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
      DBInstanceIdentifier: !Sub ${ForemanSubdomain}-db
      DBName: "foreman_db"
      AllocatedStorage: 50
      DBInstanceClass:  db.t2.small
      AutoMinorVersionUpgrade: true
      Engine: "postgres"
      EngineVersion: "9.5.2"
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: "15"
      DBSnapshotIdentifier: !Ref DBSnapShot
      DBSecurityGroups:
        - !Ref ForemanDBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MonitoringInterval: 5
      Tags:
        # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        - Key: Name
          Value: !Sub "${ForemanSubdomain} Database"
    DeletionPolicy: "Snapshot"

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref ServerSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        "Fn::Base64":
          "Fn::Sub":
            - |
              #!/bin/bash -xev
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

              yum -y upgrade || error_exit "Failed to upgrade"
              yum install -y curl python-setuptools git

              # Install cfn bootstraping tools
              if [ -z $(command -v cfn-signal) ]; then
                  easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
              fi

              # Helper function to set wait timer
              error_exit()
              {
                cfn-signal -e 1 -r "$1" "${WaitHandle}"
                exit 1
              }

              # Check for and Install Pip
              if [ -z $(command -v pip) ]; then
                curl https://bootstrap.pypa.io/get-pip.py | python || error_exit "Failed to install Pip"
              fi

              # Install AWS Cli Tools
              if [ -z $(command -v aws) ]; then
                pip install awscli || error_exit "Failed to install aws cli"
              fi

              # install chef
              if [ ! -f "/usr/bin/chef-client" ]; then
                  curl -L https://omnitruck.chef.io/install.sh | bash || error_exit 'could no install chef'
              fi

              # Install S3FS Dependencies
              yum install -y automake fuse fuse-devel gcc-c++ git libcurl-devel libxml2-devel make openssl-devel || error_exit "Failed to install S3FS Deps"

              # Install S3FS

              # If directory exists, remove it
              if [ -d "/tmp/s3fs-fuse" ]; then
                rm -rf /tmp/s3fs-fuse || error_exit "Failed to remove existing S3FS Directory"
              fi

              # If s3fs command doesn't exist, install
              if [ ! -f "/usr/local/bin/s3fs" ]; then
                cd /tmp
                git clone https://github.com/s3fs-fuse/s3fs-fuse.git || error_exit 'Failed to clone s3fs-fuse'
                cd s3fs-fuse
                ./autogen.sh || error_exit 'Failed to run autogen for s3fs-fuse'
                ./configure || error_exit 'Failed to run configure for s3fs-fuse'
                make || error_exit 'Failed to make s3fs-fuse'
                make install || error_exit 'Failed run make-install s3fs-fuse'
              fi

              # Create S3FS Mount Directory
              if [ ! -d "/opt/s3-bucket" ]; then
                mkdir /opt/s3-bucket
              fi

              # Mount S3 Bucket to Directory
              /usr/local/bin/s3fs -o allow_other -o umask=000 -o iam_role=${InstanceRole} -o endpoint=${BucketRegion} ${BucketName} /opt/s3-bucket || error_exit 'Failed to mount s3fs'

              echo -e "${BucketName} /opt/s3-bucket fuse.s3fs rw,_netdev,allow_other,umask=000,iam_role=${InstanceRole},endpoint=${BucketRegion},retries=5,multireq_max=5 0 0" >> /etc/fstab || error_exit 'Failed to add mount info to fstab'

              # Sleep to allow s3fs to connect
              sleep 20

              # Set hostname
              hostname foreman.${HostedZone}  || error_exit 'Failed to set hostname'
              echo  foreman.${HostedZone}  > /etc/hostname || error_exit 'Failed to set hostname file'

              cat > '/etc/hosts' << EOF
              127.0.0.1 foreman.${HostedZone} foreman ${ForemanSubdomain} foreman localhost
              ::1 localhost6.localdomain6 localhost6
              EOF

              cd / && tar -zxvf /opt/s3-bucket/core_bundle.tar.gz etc/opscode/pivotal.pem || error_exit "Failed to extract Pivotal.pem"
              chown -R root:root /etc/opscode/ && chmod -R 766 /etc/opscode

              mkdir -p /opt/certs && cp -r /opt/s3-bucket/certs/foreman/* /opt/certs/
              chmod -R 766 /opt/certs/

              # Install foreman epel repo and foreman installer
              yum install -y epel-release https://yum.theforeman.org/releases/1.13/el7/x86_64/foreman-release.rpm || error_exit "Failed to install epel foreman"
              yum install -y foreman-installer || error_exit "Failed to install foreman-installer via yum"

              puppet cert generate foreman.${HostedZone}

              # Install Dev Gems of Chef Plugins (better support for 1.13)
              gem install bundle || error_exit "Failed to install gem Bundle"

              mkdir -p /opt/bundle
              cat > '/opt/bundle/Gemfile' <<EOF
              source "https://rubygems.org"

              gem 'foreman_chef', :git => 'https://github.com/theforeman/foreman_chef.git'
              gem 'smart_proxy_chef', :git => 'https://github.com/theforeman/smart_proxy_chef.git'
              EOF

              cd /opt/bundle/ && bundle install || error_exit "Bundle Install Failed"

              # Create Answer File Directory
              mkdir -p /etc/foreman-installer/scenarios.d/ || error_exit "Could create foreman answers directory"

              # Create Foreman Answer File
              cat > '/etc/foreman-installer/scenarios.d/foreman-answers.yaml' <<EOF
              ---
                foreman:
                  foreman_url: "https://foreman.${HostedZone}"
                  puppetrun: false
                  unattended: true
                  authentication: true
                  configure_epel_repo: true
                  configure_scl_repo: true
                  servername: foreman.${HostedZone}
                  serveraliases:
                    - foreman
                    - ${ForemanSubdomain}
                  ssl: true
                  custom_repo: true
                  repo: stable
                  gpgcheck: true
                  db_manage: false
                  db_type: postgresql
                  db_adapter: postgresql
                  db_host: ${DBENDPOINT}
                  db_port: ${DBPORT}
                  db_database: foreman_db
                  db_username: ${DBUser}
                  db_password: ${DBPassword}
                  app_root: /usr/share/foreman
                  manage_user: true
                  user: foreman
                  group: foreman
                  user_groups:
                    - puppet
                  rails_env: production
                  puppet_home: /var/lib/puppet
                  puppet_ssldir: /var/lib/puppet/ssl
                  server_ssl_port: 443
                  server_ssl_chain: /opt/certs/foreman.${HostedZone}.chain.crt
                  server_ssl_cert: /opt/certs/foreman.${HostedZone}.crt
                  server_ssl_certs_dir: /opt/certs/
                  server_ssl_key: /opt/certs/foreman.${HostedZone}.key
                  server_ssl_crl: ""
                  client_ssl_ca: /var/lib/puppet/ssl/certs/ca.pem
                  client_ssl_cert: /var/lib/puppet/ssl/certs/foreman.${HostedZone}.pem
                  client_ssl_key: /var/lib/puppet/ssl/private_keys/foreman.${HostedZone}.pem
                  admin_username: ${AdminUser}
                  admin_password: ${AdminPassword}
                  admin_email: ${AdminEmail}
                  websockets_encrypt: true
                  websockets_ssl_key: /var/lib/puppet/ssl/private_keys/foreman.${HostedZone}.pem
                  websockets_ssl_cert: /var/lib/puppet/ssl/certs/foreman.${HostedZone}.pem
                  email_conf: email.yaml
                  email_source: email.yaml.erb
                  email_delivery_method:
                  email_smtp_address:
                  email_smtp_port: 25
                  email_smtp_domain:
                  email_smtp_authentication: none
                  email_smtp_user_name:
                  email_smtp_password:
                "foreman::cli":
                  foreman_url:
                  manage_root_config: true
                  username:
                  password:
                  refresh_cache: false
                  request_timeout: 120
                foreman_proxy:
                  bind_host: "*"
                  ssl_port: 8443
                  gpgcheck: true
                  custom_repo: true
                  http: false
                  ssl: true
                  ssl_ca: /var/lib/puppet/ssl/certs/ca.pem
                  ssl_cert: /var/lib/puppet/ssl/certs/foreman.${HostedZone}.pem
                  ssl_key: /var/lib/puppet/ssl/private_keys/foreman.${HostedZone}.pem
                  foreman_ssl_ca: /var/lib/puppet/ssl/certs/ca.pem
                  foreman_ssl_cert: /var/lib/puppet/ssl/certs/foreman.${HostedZone}.pem
                  foreman_ssl_key: /var/lib/puppet/ssl/private_keys/foreman.${HostedZone}.pem
                  logs: true
                  logs_listen_on: http
                  tftp: true
                  tftp_listen_on: http
                  register_in_foreman: false
                  ssl_disabled_ciphers: []
                  manage_sudoersd: true
                  use_sudoersd: true
                  puppetca: false
                  manage_puppet_group: false
                  puppet: false
                  foreman_base_url: "https://foreman.${HostedZone}"
                  dns_server: "8.8.8.8"
                puppet: false
                "foreman::plugin::tasks": true
                "foreman::compute::ec2": true
                "foreman::plugin::chef": true
                "foreman_proxy::plugin::chef":
                  enabled: true
                  listen_on: https
                  server_url: ${ChefServerUrl}
                  client_name: pivotal
                  private_key: /etc/opscode/pivotal.pem
                  ssl_verify: true
              EOF

              foreman-installer || error_exit "Foreman Install Failed"
              # Run foremand DB tasks
              foreman-rake db:migrate || error_exit "db migrate failed for Foreman"
              if [ -z ${DBSnapShot} ]; then
                foreman-rake db:seed || error_exit "db seed failed for Foreman"
              fi
              foreman-rake apipie:cache:index || error_exit "apipie cache index failed for foreman"

              service apache2 restart || error_exit "Failed to restart foreman post DB Setup"

              # All is well so signal success and let CF know wait function is complete
              cfn-signal -e 0 -r 'Server setup complete' "${WaitHandle}"
            - { DBENDPOINT: !GetAtt [ ForemanDB, Endpoint.Address ], DBPORT: !GetAtt [ ForemanDB, Endpoint.Port ], FOREMANURL: !Join [ '', [ !Ref ForemanSubdomain, ".", !Ref HostedZone ] ] }

  # Wait setups to force EC2 instances to now show cloudformation complete until the Userdata (backend cookbook) has completely succesfully
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Ec2Instance
    Properties:
      Handle:  !Ref WaitHandle
      Timeout: '2300'
