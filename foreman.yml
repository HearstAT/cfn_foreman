---
AWSTemplateFormatVersion: '2010-09-09'
Description: "The Foreman on CentOS 7"
Parameters:
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
    Default: ''

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  CIDRA:
    Type: String
    Default: 172.33.80.0/24
    Description: Subnet A CIDR Block

  CIDRB:
    Type: String
    Default: 172.33.90.0/24
    Description: Subnet B CIDR Block

  ForemanSubdomain:
    Type: String
    Default: Foreman-a
    AllowedValues:
      - Foreman-a
      - Foreman-b
      - Foreman-test
    Description: subdomain/prefix for chose hosted zone used for staging

  DBUser:
    Type: String
    Default: ''
    Description: Enter DB User Name

  DBPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter DB Password

  AdminUser:
    Type: String
    Default: ''
    Description: Enter Foreman Admin User Name

  AdminEmail:
    Type: String
    Default: ''
    Description: Enter Foreman Admin Email

  AdminPassword:
    Type: String
    NoEcho: 'true'
    Default: ''
    Description: Enter Foreman Admin Password

  HostedZone:
    Type: String
    Default: domain.com
    Description: must match a route53 hosted domain/zone

  ChefServerUrl:
    Type: String
    Default: chef.domain.com
    Description: Enter the chef server url you wish to connect foreman to

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: Instance & Network Configuration
      Parameters:
        - InstanceType
        - KeyName
        - VPC
        - HostedZone
        - SSHSecurityGroup
        - CIDRA
        - CIDRB
    -
      Label:
        default: Database Configuration
      Parameters:
        - DBUser
        - DBPassword
    -
      Label:
        default: Foreman Configuration
      Parameters:
        - AdminUser
        - AdminPassword
        - AdminEmail
        - ForemanSubdomain
        - ChefServerUrl

Mappings:
  RegionMap:
    us-west-2:
      HVM64: ami-d2c924b2
    eu-west-1:
      HVM64: ami-7abd0209

Resources:
  # Create the necessary subnets for Instance and DB
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref CIDRA
      Tags:
        - Key: Name
          Value: Public-Subnet-A
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Get Availability Zones and select first in string
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Ref CIDRB
      Tags:
        - Key: Name
          Value: Public-Subnet-B
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Network
          Value: "Public"

  # Create the necessary subnet for RDS PostgreSQL
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Foreman DB Subnet Group"
      SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
      Tags:
        # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        - Key: Name
          Value: !Sub "${ForemanSubdomain} DB Subnet Group"

  ForemanDBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !Ref ServerSecurityGroup
      GroupDescription: "Frontend Access"

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Server-Security-Group

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # Just a placeholder role, please don't use this for real!
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref InstanceRole

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          !Ref InstanceRole

  ForemanDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
      HostedZoneName: !Sub "${HostedZone}."
      Comment: !Sub Zone apex alias targeted to ${ForemanSubdomain} Server.
          # Create DNS A Record by joining ForemanSubdomain + HostedZone
      Name: !Join [ '', [ !Ref ForemanSubdomain, ".", !Ref HostedZone, "." ] ]
      Type: A
      TTL: "900"
      ResourceRecords:
        - !GetAtt Ec2Instance.PublicIp

  ForemanDB:
    Type: AWS::RDS::DBInstance
    Properties:
      # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
      DBInstanceIdentifier: !Sub ${ForemanSubdomain}-db
      DBName: "foreman_db"
      AllocatedStorage: 50
      DBInstanceClass:  db.t2.small
      Engine: "postgres"
      EngineVersion: "9.5.2"
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      BackupRetentionPeriod: "30"
      DBSecurityGroups:
        - !Ref ForemanDBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      MonitoringInterval: 5
      Tags:
        # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        - Key: Name
          Value: !Sub "${ForemanSubdomain} Database"
    DeletionPolicy: "Snapshot"

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref ServerSecurityGroup
            - !Ref SSHSecurityGroup
          SubnetId:
            Ref: SubnetA
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: '15'
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        # Use sub to treat params and resources like variables http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
        "Fn::Base64":
          "Fn::Sub":
            - |
              #!/bin/bash -xev
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

              yum -y upgrade || error_exit "Failed to upgrade"
              yum install -y curl python-setuptools git || error_exit " Failed to install curl and setup tools"

              # Install cfn bootstraping tools
              if [ -z $(command -v cfn-signal) ]; then
                  easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz || error_exit "Failed to install cfn tools"
              fi

              # Check for and Install Pip
              if [ -z $(command -v pip) ]; then
                curl https://bootstrap.pypa.io/get-pip.py | python || error_exit "Failed to install Pip"
              fi

              # Install AWS Cli Tools
              if [ -z $(command -v aws) ]; then
                pip install awscli || error_exit "Failed to install aws cli"
              fi

              # Helper function to set wait timer
              error_exit()
              {
                /usr/local/bin/cfn-signal -e 1 -r $1 ${WaitHandle}
                exit 1
              }

              # Install foreman epel repo and foreman installer
              yum install -y epel-release https://yum.theforeman.org/releases/1.13/el7/x86_64/foreman-release.rpm || error_exit "Failed to install epel foreman"
              yum install -y foreman-installer || error_exit "Failed to install foreman-installer via yum"
              yum install -y https://packages.chef.io/stable/el/7/chef-12.16.42-1.el7.x86_64.rpm || error_exit "Failed to install chef"
              mkdir -p /etc/foreman-installer/scenarios.d/ || error_exit "Could create foreman answers directory"

              # Create Database
              cat > '/etc/foreman-installer/scenarios.d/foreman-answers.yaml' <<EOF
              ---
                foreman:
                  foreman_url: "http://${FOREMANURL}"
                  puppetrun: false
                  unattended: true
                  authentication: true
                  servername: ${FOREMANURL}
                  serveraliases:
                    - foreman
                  ssl: false
                  custom_repo: true
                  repo: stable
                  configure_epel_repo: true
                  configure_scl_repo: true
                  gpgcheck: true
                  db_manage: false
                  db_type: postgresql
                  db_adapter: postgresql
                  db_host: ${DBENDPOINT}
                  db_database: ${ForemanSubdomain}-db
                  db_username: ${DBUser}
                  db_password: ${DBPassword}
                  admin_username: ${AdminUser}
                  admin_password: ${AdminPassword}
                  admin_email: ${AdminEmail}
                  websockets_encrypt: false
                  logging_level: info
                  loggers: {}
                  email_conf: email.yaml
                  email_source: email.yaml.erb
                  email_delivery_method:
                  email_smtp_address:
                  email_smtp_port: 25
                  email_smtp_domain:
                  email_smtp_authentication: none
                  email_smtp_user_name:
                  email_smtp_password:
                "foreman::cli":
                  foreman_url:
                  manage_root_config: true
                  username:
                  password:
                  refresh_cache: false
                  request_timeout: 120
                foreman_proxy:
                  repo: stable
                  gpgcheck: true
                  custom_repo: true
                  ssl: false
                  trusted_hosts:
                    - ${FOREMANURL}
                  ssl_disabled_ciphers: []
                  manage_sudoersd: true
                  use_sudoersd: true
                  puppetca: false
                  manage_puppet_group: false
                  puppet: false
                puppet: false
                "foreman::plugin::tasks":
                  package: tfm-rubygem-foreman-tasks
                  service: foreman-tasks
                "foreman::compute::ec2": false
                "foreman_proxy::plugin::chef":
                  enabled: true
                  listen_on: https
                  server_url: #{ChefServerUrl}
                  client_name: pivotal
                  private_key: /etc/opscode/pivotal.pem
                  ssl_verify: true
              EOF
              #
              foreman-installer || error_exit "Foreman Install Failed"
              #
              # # Run foremand DB tasks
              # foreman-rake db:migrate || error_exit "db migrate failed for Foreman"
              # foreman-rake db:seed || error_exit "db seed failed for Foreman"
              # foreman-rake apipie:cache:index || error_exit "apipie cache index failed for foreman"

              # All is well so signal success and let CF know wait function is complete
              /usr/local/bin/cfn-signal -e 0 -r 'Server setup complete' ${WaitHandle}
            - { DBENDPOINT: !GetAtt [ ForemanDB, Endpoint.Address ], FOREMANURL: !Join [ '', [ !Ref ForemanSubdomain, ".", !Ref HostedZone ] ] }

  # Wait setups to force EC2 instances to now show cloudformation complete until the Userdata (backend cookbook) has completely succesfully
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Ec2Instance
    Properties:
      Handle:  !Ref WaitHandle
      Timeout: '2300'
